<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\moderation_notes\ModerationNoteInterface;

/**
 * Implements hook_entity_view_alter().
 */
function moderation_notes_entity_view_alter(&$build, EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if (!_moderation_notes_access($entity)) {
    return;
  }

  // Load notes for this entity.
  $ids = \Drupal::entityQuery('moderation_note')
    ->condition('entity_type', $entity->getEntityTypeId())
    ->condition('entity_id', $entity->id())
    ->condition('entity_langcode', $entity->language()->getId())
    ->condition('entity_view_mode_id', $display->getOriginalMode())
    ->notExists('parent')
    ->execute();

  /** @var \Drupal\moderation_notes\ModerationNoteInterface[] $notes */
  $notes = \Drupal::entityTypeManager()->getStorage('moderation_note')->loadMultiple($ids);
  foreach ($notes as $note) {
    $setting = [
      'field_id' => _moderation_notes_generate_field_id($note),
      'id' => $note->id(),
      'quote' => $note->getQuote(),
      'quote_offset' => $note->getQuoteOffset(),
    ];
    $build['#attached']['drupalSettings']['moderation_notes'][$note->id()] = $setting;
  }
}

/**
 * Implements hook_entity_delete().
 */
function moderation_notes_entity_delete(EntityInterface $entity) {
  // Load and delete all associated notes for this entity.
  $ids = \Drupal::entityQuery('moderation_note')
    ->condition('entity_type', $entity->getEntityTypeId())
    ->condition('entity_id', $entity->id())
    ->execute();
  $notes = \Drupal::entityTypeManager()->getStorage('moderation_note')->loadMultiple($ids);
  \Drupal::entityTypeManager()->getStorage('moderation_note')->delete($notes);
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 */
function moderation_notes_preprocess_field(&$variables) {
  $variables['#cache']['contexts'][] = 'user.permissions';

  $element = $variables['element'];
  /** @var $entity \Drupal\Core\Entity\EntityInterface */
  $entity = $element['#object'];
  /** @var \Drupal\Core\Field\FieldItemList $field_list */
  $field_list = $element['#items'];
  $field_definition = $field_list->getFieldDefinition();

  // Check access for moderation notes.
  if (!_moderation_notes_access($entity)) {
    return;
  }

  // Check the field type - we only support text fields at this time.
  $supported_types = ['string', 'text', 'text_long', 'text_with_summary'];
  if (!in_array($field_definition->getType(), $supported_types, TRUE)) {
    return;
  }

  $definition = $entity->getFieldDefinition($element['#field_name']);
  if (!$definition->isComputed()) {
    $variables['#attached']['library'][] = 'moderation_notes/main';
    $variables['attributes']['data-moderation-notes-field-id'] = $entity->getEntityTypeId() . '/' . $entity->id() . '/' . $element['#field_name'] . '/' . $element['#language'] . '/' . $element['#view_mode'];
  }
}

/**
 * Access callback to determine if an Entity can be annotated.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The Entity to check.
 *
 * @return bool
 *   TRUE if the current user can access the Entity, FALSE otherwise.
 */
function _moderation_notes_access(EntityInterface $entity) {
  /** @var \Drupal\content_moderation\ModerationInformation $moderation_information */
  $moderation_information = \Drupal::service('content_moderation.moderation_information');

  // Check if this is the latest moderated revision and if the user has access.
  return \Drupal::currentUser()->hasPermission('access moderation notes')
  && $moderation_information->isModeratedEntity($entity)
  && $moderation_information->isLatestRevision($entity)
  && !$entity->isNew();
}

/**
 * Implements hook_theme().
 */
function moderation_notes_theme() {
  return [
    'moderation_note' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for moderation_note templates.
 *
 * Default template: moderation-note.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_moderation_note(&$variables) {
  $variables['moderation_note'] = $variables['elements']['#moderation_note'];
  /** @var \Drupal\moderation_notes\ModerationNoteInterface $note */
  $note = $variables['moderation_note'];
  $variables['text'] = $note->getText();
  $variables['quote'] = $note->getQuote();
  $variables['created'] = $note->getCreatedTime();
  $variables['created_pretty'] = _moderation_notes_pretty_time($note->getCreatedTime());
  $variables['updated'] = $note->getChangedTime();
  $variables['updated_pretty'] = _moderation_notes_pretty_time($note->getChangedTime());
  $owner = $note->getOwner();
  $variables['author_name'] = $owner->getDisplayName();
  $variables['author_link'] = $owner->toLink()->toRenderable();
  $variables['author_username'] = $owner->label();
  $variables['author_picture'] = user_view($owner, 'compact');
  $variables['parent'] = $note->getParent();
  $variables['moderated_entity_link'] = $note->getModeratedEntity()->toLink();

  // Attributes.
  $variables['attributes']['class'][] = 'moderation-note';
  $variables['attributes']['data-moderation-note-id'] = $note->id();
  if ($note->getParent()) {
    $variables['attributes']['class'][] = 'moderation-note-reply';
  }

  // We show note actions inline with the note, if the user has access.
  $params = ['moderation_note' => $note->id()];
  if ($note->access('update')) {
    $url = Url::fromRoute('moderation_notes.edit', $params);
    $variables['edit_button'] = [
      '#type' => 'link',
      '#title' => t('Edit'),
      '#url' => $url,
      '#attributes' => [
        'class' => ['use-ajax'],
      ],
    ];
  }
  if ($note->access('delete')) {
    $url = Url::fromRoute('moderation_notes.delete', $params);
    $variables['delete_button'] = [
      '#type' => 'link',
      '#title' => t('Delete'),
      '#url' => $url,
      '#attributes' => [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'dialog',
        'data-dialog-renderer' => 'offcanvas',
      ],
    ];
  }
}

/**
 * Displays a timestamp in a human-readable fashion.
 *
 * @param int $time
 *   A timestamp.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   Markup representing a formatted time.
 */
function _moderation_notes_pretty_time($time) {
  $time = (int) $time;
  $too_old = strtotime('-1 month');
  // Show formatted time differences for edits younger than a month.
  if ($time > $too_old) {
    $diff = \Drupal::service('date.formatter')->formatTimeDiffSince($time, ['granularity' => 1]);
    $time_pretty = t('@diff ago', ['@diff' => $diff]);
  }
  else {
    $date = date('m/d/Y - h:i A', $time);
    $time_pretty = t('on @date', ['@date' => $date]);
  }
  return $time_pretty;
}

/**
 * Generates a field ID for a given note.
 *
 * @param \Drupal\moderation_notes\ModerationNoteInterface $note
 *   The note to generate the field ID from.
 *
 * @return string
 *   A string representing a note's field ID.
 */
function _moderation_notes_generate_field_id(ModerationNoteInterface $note) {
  return $note->getModeratedEntityTypeId() . '/' . $note->getModeratedEntityId() . '/' . $note->getEntityFieldName() . '/' . $note->getEntityLanguage() . '/' . $note->getEntityViewModeId();
}
